package docker

import (
	"fmt"
	"strings"
)

type DockerfileTemplate struct {
	BaseImage    string
	WorkDir      string
	Dependencies []string
	BuildCmd     string
	StartCmd     []string
	Port         string
	EnvVars      map[string]string
}

var defaultTemplates = map[string]DockerfileTemplate{
	"Node": {
		BaseImage: "node:22-alpine",
		WorkDir:   "/app",
		Dependencies: []string{
			"COPY package*.json ./",
			"RUN npm install --include=dev",
			"RUN npm install -g serve",
		},
		BuildCmd: "npm run build",
		StartCmd: []string{"serve", "-s", "dist", "-l", "3000"},
		Port:     "3000",
		EnvVars: map[string]string{
			"NODE_ENV": "production",
		},
	},
	"Python": {
		BaseImage: "python:3.9-slim",
		WorkDir:   "/app",
		Dependencies: []string{
			"COPY requirements.txt .",
			"RUN pip install -r requirements.txt",
		},
		BuildCmd: "",
		StartCmd: []string{"python", "app.py"},
		Port:     "5000",
		EnvVars: map[string]string{
			"FLASK_ENV": "production",
		},
	},
	"Go": {
		BaseImage: "golang:1.23-alpine",
		WorkDir:   "/app",
		Dependencies: []string{
			"RUN ls -la",
			"COPY go.mod go.sum ./",
			"RUN go mod download",
			"COPY . .",
		},
		BuildCmd: "go build -o main .",
		StartCmd: []string{"./main"},
		Port:     "8080",
		EnvVars: map[string]string{
			"GO_ENV": "production",
		},
	},
	"Ruby": {
		BaseImage: "ruby:3.0-alpine",
		WorkDir:   "/app",
		Dependencies: []string{
			"COPY Gemfile Gemfile.lock ./",
			"RUN bundle install",
		},
		BuildCmd: "",
		StartCmd: []string{"ruby", "app.rb"},
		Port:     "4567",
		EnvVars: map[string]string{
			"RACK_ENV": "production",
		},
	},
	"Rust": {
		BaseImage: "rust:1.55",
		WorkDir:   "/app",
		Dependencies: []string{
			"COPY Cargo.toml Cargo.lock ./",
			"RUN cargo build --release",
		},
		BuildCmd: "",
		StartCmd: []string{"./target/release/app"},
		Port:     "8000",
		EnvVars: map[string]string{
			"RUST_ENV": "production",
		},
	},
	"PHP": {
		BaseImage: "php:8.0-apache",
		WorkDir:   "/var/www/html",
		Dependencies: []string{
			"COPY composer.json composer.lock ./",
			"RUN composer install",
		},
		BuildCmd: "",
		StartCmd: []string{"apache2-foreground"},
		Port:     "80",
		EnvVars: map[string]string{
			"APACHE_DOCUMENT_ROOT": "/var/www/html/public",
		},
	},
}

func (tmpl DockerfileTemplate) GetDockerfile() string {
	// Convert start command slice to properly formatted JSON array string
	cmdArgs := make([]string, len(tmpl.StartCmd))
	for i, arg := range tmpl.StartCmd {
		cmdArgs[i] = fmt.Sprintf("%q", arg)
	}

	// Build environment variables
	envVars := make([]string, 0, len(tmpl.EnvVars))
	for key, value := range tmpl.EnvVars {
		envVars = append(envVars, fmt.Sprintf("ENV %s=%s", key, value))
	}

	return fmt.Sprintf(`FROM %s
WORKDIR %s
%s
%s
COPY . .
RUN %s
EXPOSE %s
%s
CMD [%s]
`,
		tmpl.BaseImage,
		tmpl.WorkDir,
		strings.Join(envVars, "\n"),
		strings.Join(tmpl.Dependencies, "\n"),
		tmpl.BuildCmd,
		tmpl.Port,
		"# Generated by Neploy",
		strings.Join(cmdArgs, ", "))
}
